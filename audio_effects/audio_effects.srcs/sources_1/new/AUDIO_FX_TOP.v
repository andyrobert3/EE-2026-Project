`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: James Arista Yaputra, Matthew Alexander
// Matric No.: A0170761H, A0170903L
// Description: IDK
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    input [6:0] sw,
    input [3:0] state,
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4    // PmodDA2 serial clock, 50MHz clock
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_10k;
      wire clk_20k;
      wire clk40k;
      wire clk_50M;    
      wire clk_2;
      wire [11:0] MIC_in;
      
      clock_gen cg (CLK, clk_10k, clk_20k, clk_50M);
      clock_40k(CLK, clk40);
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this are
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out1;
      wire [11:0] speaker_out2;
      wire [11:0] speaker_out3;
      reg [11:0] speaker_out;
      
      doremi u4(sw, state[3], clk_20k, speaker_out1);
      record u5(clk_20k, state[3], MIC_in, speaker_out2);
      play_song u6(state[3], clk_20k, speaker_out3);
      
      always @ (state[0], state[1], state[2]) begin
        if (state[0]) begin
            speaker_out <= speaker_out1;
        end
        else if (state[1]) begin
            speaker_out <= speaker_out2;
        end
        else if (state[2]) begin
            speaker_out <= speaker_out3;
        end
        
      end


    
      //assign speaker_out =
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
